//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/Input/RPSInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RPSInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RPSInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RPSInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f43a5e60-7501-4b34-b5a5-55e8615558e1"",
            ""actions"": [
                {
                    ""name"": ""Rock"",
                    ""type"": ""Button"",
                    ""id"": ""f92af752-5efe-4af2-9314-0b45fae782ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Paper"",
                    ""type"": ""Button"",
                    ""id"": ""02c4ce4b-1ffd-41f6-96a6-e750c3b1e0a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scissors"",
                    ""type"": ""Button"",
                    ""id"": ""a3195ff4-1ba0-4191-a0f7-738ca36776f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e0115c92-5d36-4313-8d2f-5db2d22618bc"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e27a186-dc16-45f4-a001-1e811a8cf8aa"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Paper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df89a68d-54a3-45fd-8b96-aa79ce22295d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scissors"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Rock = m_Player.FindAction("Rock", throwIfNotFound: true);
        m_Player_Paper = m_Player.FindAction("Paper", throwIfNotFound: true);
        m_Player_Scissors = m_Player.FindAction("Scissors", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Rock;
    private readonly InputAction m_Player_Paper;
    private readonly InputAction m_Player_Scissors;
    public struct PlayerActions
    {
        private @RPSInput m_Wrapper;
        public PlayerActions(@RPSInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rock => m_Wrapper.m_Player_Rock;
        public InputAction @Paper => m_Wrapper.m_Player_Paper;
        public InputAction @Scissors => m_Wrapper.m_Player_Scissors;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Rock.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRock;
                @Rock.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRock;
                @Rock.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRock;
                @Paper.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPaper;
                @Paper.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPaper;
                @Paper.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPaper;
                @Scissors.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScissors;
                @Scissors.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScissors;
                @Scissors.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnScissors;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rock.started += instance.OnRock;
                @Rock.performed += instance.OnRock;
                @Rock.canceled += instance.OnRock;
                @Paper.started += instance.OnPaper;
                @Paper.performed += instance.OnPaper;
                @Paper.canceled += instance.OnPaper;
                @Scissors.started += instance.OnScissors;
                @Scissors.performed += instance.OnScissors;
                @Scissors.canceled += instance.OnScissors;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnRock(InputAction.CallbackContext context);
        void OnPaper(InputAction.CallbackContext context);
        void OnScissors(InputAction.CallbackContext context);
    }
}
